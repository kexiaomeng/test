


import java.util.concurrent.atomic.AtomicReference;


public class Zixuan implements Runnable {
	static int sum;
	private SpinLock lock;
	
	public Zixuan(SpinLock lock) {
		this.lock = lock;
	}
	public static void main(String[] args) throws InterruptedException {
		SpinLock lock = new SpinLock();
		for (int i = 0; i < 100; i++) {
			Zixuan Zixuan = new Zixuan(lock);
			Thread t = new Thread(Zixuan);
			t.start();
		}
		
		Thread.currentThread();
		Thread.sleep(2000);
		System.out.println(sum);
	}
	
	@Override
	public void run() {
		this.lock.lock();
		sum++;
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		this.lock.unLock();
	}
	
	
}
	class SpinLock {
	    //java中原子（CAS）操作
	AtomicReference<Thread> owner = new AtomicReference<Thread>();//持有自旋锁的线程对象
	private int count;
	public void lock() {
		Thread cur = Thread.currentThread();
		//lock函数将owner设置为当前线程，并且预测原来的值为空。unlock函数将owner设置为null，并且预测值为当前线程。当有第二个线程调用lock操作时由于owner值不为空，导致循环	
		System.out.println("current Thread :"+Thread.currentThread().getName());
	        //一直被执行，直至第一个线程调用unlock函数将owner设置为null，第二个线程才能进入临界区。
		while (!owner.compareAndSet(null, cur)){
			System.out.println("自旋锁");
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	public void unLock() {
		Thread cur = Thread.currentThread();
			owner.compareAndSet(cur, null);
		}
	}
