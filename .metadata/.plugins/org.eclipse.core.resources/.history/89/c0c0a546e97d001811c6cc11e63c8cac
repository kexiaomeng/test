package com.nari.sun.eventListen.sonClass;

import java.util.EnumMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;


import com.nari.sun.eventListen.EventSource;
import com.nari.sun.eventListen.EventType;
import com.nari.sun.eventListen.iface.EventListen;
import com.nari.sun.eventListen.iface.Handler;

public class SimpleEventListen implements EventListen{
	
	private Map<EventType, Handler> handlers = new EnumMap<EventType, Handler>(EventType.class);
	private volatile boolean started = false;
	private ExecutorService exeService = null;

	public SimpleEventListen(){
		
	}

	@Override
	public void registeEvent(EventType type, Handler handler) {
		// TODO Auto-generated method stub
		this.handlers.put(type, handler);
	}
	
	@Override
	public void onEvent(EventSource es){
		this.disPatch(es);
	}
	private void disPatch(EventSource es) {
		// TODO Auto-generated method stub
		this.exeService.execute(new Task(es));
	}
	
	class Task{
		public Task(EventSource es){
			this.es = es;
		}
	}

	@Override
	public void start() {
		// TODO Auto-generated method stub
		exeService = Executors.newCachedThreadPool();
		setStarted(true);
	}
	@Override
	public void stop() {
		// TODO Auto-generated method stub
		
	}
	
	public boolean isStarted() {
		return started;
	}

	public void setStarted(boolean started) {
		this.started = started;
	}

}
