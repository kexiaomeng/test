package com.nari.sun;

import java.nio.ByteBuffer;

import com.nari.sun.netty.obj.Header;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelFutureListener;
import io.netty.channel.ChannelHandlerAdapter;
import io.netty.channel.ChannelHandlerContext;
import io.netty.handler.timeout.IdleState;
import io.netty.handler.timeout.IdleStateEvent;
import io.netty.util.ReferenceCountUtil;

public class ClientHandler extends ChannelHandlerAdapter{
	
	private int count = 0;
	private NettyClient client;
	private static final ByteBuf HEAR_BEAT = Unpooled.directBuffer().writeBytes("HeartBeat\n".getBytes());

	public ClientHandler(NettyClient client){
		this.client = client;
	}
	@Override
	 public void channelActive(ChannelHandlerContext ctx) throws Exception{
//		String bufferString = "00010001000100020100\n";
//    	for(int i = 0;i<10;i++){
//    		byte[] req = transHexStrToBuff(bufferString);
//    	
//    		ByteBuf buf = Unpooled.directBuffer();
//    		buf.writeBytes(req);
//    		
//    		ctx.writeAndFlush(buf);
//    		if (!buf.isWritable())
//    		    System.out.println("Send order 2 server succeed.");
		Header header = new Header();
		header.setLength(10)；
		header.setSessionId(111111111111L);
		ChannelFuture future = ctx.writeAndFlush();
//    	}
		
		future.addListener(new ChannelFutureListener() {
			
			@Override
			public void operationComplete(ChannelFuture f) throws Exception {
				// TODO Auto-generated method stub
				if(!f.isSuccess()){
					f.cause().printStackTrace();
					f.channel().close();
				}
			}
		});
	}
	@Override
	public void channelRead(ChannelHandlerContext ctx,Object obj){
		String msg = (String)obj;
		System.out.println("received from Server："+msg);
		if(msg.equals("HEART_BEAT")){
			System.out.println("heart_beat");
			ctx.write("read mes from ser");
			ctx.flush();
		}
		ReferenceCountUtil.release(obj);
//		String bufferString = "0001000100010002010000";
////    	for(int i = 0;i<10;i++){
//    		byte[] req = transHexStrToBuff(bufferString);
//    	
//    		ByteBuf buf = Unpooled.directBuffer();
//    		buf.writeBytes(req);
//    		
//    		ctx.writeAndFlush(buf);
//    		if (!buf.isWritable())
//    		    System.out.println("Send order 2 server succeed.");
    	}
//	}
	
	
	@Override 
	public void channelInactive(ChannelHandlerContext ctx){
	
		try {
			System.out.println("断线重连");
			client.connect();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	@Override 
	public void userEventTriggered(ChannelHandlerContext ctx,Object obj){
		if(obj instanceof IdleStateEvent){
			IdleStateEvent tmp = (IdleStateEvent)obj;
			
			if(tmp.state() == IdleState.WRITER_IDLE){
				count++;
			
				if(count < 4){
					System.out.println("current write idle: "+count);
					System.out.println("heart_beat status ,"+HEAR_BEAT.readerIndex()+","+HEAR_BEAT.writerIndex());

//					ByteBuf HEAR_BEAT1 = Unpooled.directBuffer().writeBytes("HeartBeat\n".getBytes());
					ctx.writeAndFlush(HEAR_BEAT.copy());
					System.out.println("heart_beat status ,"+HEAR_BEAT.readerIndex()+","+HEAR_BEAT.writerIndex());
//					
					HEAR_BEAT.readerIndex(0);
//					ReferenceCountUtil.release(HEAR_BEAT);

				}
			}
		}
		
		
	}
	   public static byte[] transHexStrToBuff(String hexString){
			int length = hexString.length();
			byte[] buffer = new byte[length / 2];

			for (int i = 0; i < length; i += 2) {
				buffer[i / 2] = (byte) ((toByte(hexString.charAt(i)) << 4) | toByte(hexString
						.charAt(i + 1)));
			}

			return buffer;
		}
	    
		private static int toByte(char c) {
			if (c >= '0' && c <= '9')
				return (c - '0');
			if (c >= 'A' && c <= 'F')
				return (c - 'A' + 10);
			if (c >= 'a' && c <= 'f')
				return (c - 'a' + 10);

			throw new RuntimeException("Invalid hex char '" + c + "'");
		}
		
}
